package de.micromata.merlin.word.templating;

import de.micromata.merlin.excel.ExcelSheet;
import de.micromata.merlin.excel.ExcelWorkbook;
import de.micromata.merlin.persistency.FileDescriptor;
import de.micromata.merlin.persistency.FileDescriptorInterface;
import de.micromata.merlin.utils.ReplaceUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.beans.Transient;
import java.util.*;

/**
 * A template definition defines variabled usable by templates as well as dependent variables.
 */
public class TemplateDefinition implements Cloneable, FileDescriptorInterface {
    private Logger log = LoggerFactory.getLogger(TemplateDefinition.class);
    private List<VariableDefinition> variableDefinitions = new ArrayList<>();
    private List<DependentVariableDefinition> dependentVariableDefinitions = new ArrayList<>();
    private String id;
    private String description;
    private String filenamePattern;
    private FileDescriptor fileDescriptor;
    private boolean stronglyRestrictedFilenames = true;
    private boolean isAutoGenerated = false;

    /**
     * @param variableDefinition The variable definition to add.
     * @return this for chaining.
     */
    public TemplateDefinition add(VariableDefinition variableDefinition) {
        variableDefinitions.add(variableDefinition);
        return this;
    }

    /**
     * @param dependentVariableDefinition The dependent variable definition to add.
     * @return this for chaining.
     */
    public TemplateDefinition add(DependentVariableDefinition dependentVariableDefinition) {
        dependentVariableDefinitions.add(dependentVariableDefinition);
        return this;
    }

    public void fillExcel(ExcelWorkbook excel) {
        ExcelSheet sheet = excel.createOrGetSheet("Data");
        sheet.cleanSheet();
        //ExcelRow row = sheet.appendRow();

    }

    /**
     * The name should be unique for refering it. It should be at least unique inside one directory.
     *
     * @return Unique id. There should not exist multiple templates with the same id.
     * @see FileDescriptor#getDirectory()
     */
    public String getId() {
        return id;
    }

    public TemplateDefinition setId(String id) {
        this.id = id;
        return this;
    }

    public String getDescription() {
        return description;
    }

    public TemplateDefinition setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * @return Filename pattern for generating result files. Important e. g. for serial letters.
     */
    public String getFilenamePattern() {
        return filenamePattern;
    }

    public TemplateDefinition setFilenamePattern(String filenamePattern) {
        this.filenamePattern = filenamePattern;
        return this;
    }

    /**
     * @return true, if the filenames should be strongly restricted (special characters will be replaced by Underscores). This is
     * the default value. False if the filenames will not be encoded (special characters will be preserved).
     * Not allowed characters (Windows and Unix, such as '/', '\'. '|' are replaced by underscores independent on this flag.
     * @see ReplaceUtils#encodeFilename(String, boolean)
     */
    public boolean isStronglyRestrictedFilenames() {
        return stronglyRestrictedFilenames;
    }

    public TemplateDefinition setStronglyRestrictedFilenames(boolean stronglyRestrictedFilenames) {
        this.stronglyRestrictedFilenames = stronglyRestrictedFilenames;
        return this;
    }

    public FileDescriptor getFileDescriptor() {
        return fileDescriptor;
    }

    public void setFileDescriptor(FileDescriptor fileDescriptor) {
        this.fileDescriptor = fileDescriptor;
    }

    public List<VariableDefinition> getVariableDefinitions() {
        return variableDefinitions;
    }

    public void setVariableDefinitions(List<VariableDefinition> variableDefinitions) {
        this.variableDefinitions = variableDefinitions;
    }

    public List<DependentVariableDefinition> getDependentVariableDefinitions() {
        return dependentVariableDefinitions;
    }

    public void setDependentVariableDefinitions(List<DependentVariableDefinition> dependentVariableDefinitions) {
        this.dependentVariableDefinitions = dependentVariableDefinitions;
    }

    public VariableDefinition getVariableDefinition(String variableName) {
        return getVariableDefinition(variableName, true);
    }

    /**
     * @return true if not template definition is really given and this definition is generated out of the template data.
     */
    public boolean isAutoGenerated() {
        return isAutoGenerated;
    }

    public void setAutoGenerated(boolean autoGenerated) {
        isAutoGenerated = autoGenerated;
    }

    /**
     * @param variableName The name of the variable definition to get.
     * @param logErrors    If true and a variable definition isn't found, an error message will be logged. Default is false.
     * @return The specified variable definition if found, otherwise null.
     */
    public VariableDefinition getVariableDefinition(String variableName, boolean logErrors) {
        if (variableDefinitions == null) {
            if (logErrors)
                log.error("Variable named '" + variableName + "' not found in template definition '" + getId() + "'. No variables defined.");
            return null;
        }
        for (VariableDefinition variableDefinition : variableDefinitions) {
            if (variableName.trim().equals(variableDefinition.getName())) {
                return variableDefinition;
            }
        }
        if (logErrors) {
            log.error("Variable named '" + variableName + "' not found in template definition '" + getId() + "'.");
        }
        return null;
    }

    /**
     * @param variableName The name of the variable definition to get.
     * @param logErrors    If true and a variable definition isn't found, an error message will be logged. Default is false.
     * @return The specified variable definition if found, otherwise null.
     */
    public DependentVariableDefinition getDependentVariableDefinition(String variableName, boolean logErrors) {
        if (dependentVariableDefinitions == null) {
            if (logErrors)
                log.error("Dependent variable named '" + variableName + "' not found in template definition '" + getId() + "'. No variables defined.");
            return null;
        }
        for (DependentVariableDefinition variableDefinition : dependentVariableDefinitions) {
            if (variableName.trim().equals(variableDefinition.getName())) {
                return variableDefinition;
            }
        }
        if (logErrors) {
            log.error("Dependent variable named '" + variableName + "' not found in template definition '" + getId() + "'.");
        }
        return null;
    }

    /**
     * @return Name of all variables defined (dependant variables included) in a sorted order.
     */
    @Transient
    public List<String> getAllDefinedVariableNames() {
        Set<String> variables = new HashSet<>();
        for (VariableDefinition def : variableDefinitions) {
            if (StringUtils.isNotBlank(def.getName()))
                variables.add(def.getName());
        }
        for (DependentVariableDefinition def : dependentVariableDefinitions) {
            if (StringUtils.isNotBlank(def.getName()))
                variables.add(def.getName());
        }
        List<String> result = new ArrayList<>();
        result.addAll(variables);
        Collections.sort(result, String.CASE_INSENSITIVE_ORDER);
        return result;
    }

    /**
     * @return Name of all master variables defined in a sorted order. A master variable is a variable another
     * variable depends on.
     */
    @Transient
    public List<String> getAllMasterVariableNames() {
        Set<String> variables = new HashSet<>();
        for (DependentVariableDefinition def : dependentVariableDefinitions) {
            if (def.getDependsOn() != null)
                variables.add(def.getDependsOn().getName());
        }
        List<String> result = new ArrayList<>();
        result.addAll(variables);
        Collections.sort(result, String.CASE_INSENSITIVE_ORDER);
        return result;
    }

    /**
     * @return Name of all dependent variables defined in a sorted order.
     */
    @Transient
    public List<String> getAllDependentVariableNames() {
        Set<String> variables = new HashSet<>();
        for (DependentVariableDefinition def : dependentVariableDefinitions) {
            variables.add(def.getName());
        }
        List<String> result = new ArrayList<>();
        result.addAll(variables);
        Collections.sort(result, String.CASE_INSENSITIVE_ORDER);
        return result;
    }

    /**
     * Makes a deep copy, also of the variable lists (the items will be cloned as well).
     *
     * @return The clone object.
     */
    @Override
    public Object clone() {
        TemplateDefinition templateDefinition = null;
        try {
            templateDefinition = (TemplateDefinition) super.clone();
        } catch (CloneNotSupportedException ex) {
            throw new UnsupportedOperationException(this.getClass().getCanonicalName() + " isn't cloneable: " + ex.getMessage(), ex);
        }
        if (this.variableDefinitions != null) {
            templateDefinition.variableDefinitions = new ArrayList<>();
            for (VariableDefinition variableDefinition : this.variableDefinitions) {
                templateDefinition.variableDefinitions.add((VariableDefinition) variableDefinition.clone());
            }
        }
        if (this.dependentVariableDefinitions != null) {
            templateDefinition.dependentVariableDefinitions = new ArrayList<>();
            for (DependentVariableDefinition dependentVariableDefinition : this.dependentVariableDefinitions) {
                templateDefinition.dependentVariableDefinitions.add((DependentVariableDefinition) dependentVariableDefinition.clone());
            }
        }
        templateDefinition.dependentVariableDefinitions = new ArrayList<>();
        return templateDefinition;
    }

    /**
     * @return The primary key served by the file descriptor.
     * @see FileDescriptor#getPrimaryKey()
     */
    public String getPrimaryKey() {
        return fileDescriptor != null ? fileDescriptor.getPrimaryKey() : null;
    }
}
