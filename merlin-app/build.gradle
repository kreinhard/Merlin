description = 'merlin-app'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}
apply plugin: 'com.google.osdetector'
ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : 'linux'

dependencies {
    compile project(':merlin-core')
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.12.v20180830'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.12.v20180830'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlets', version: '9.4.12.v20180830'
    compile group: 'org.glassfish.jaxb', name: 'jaxb-core', version: '2.3.0.1'
    compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.1'
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.27'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: '2.27'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.27'
    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.27'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.6'
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    compile group: 'javax.xml.ws', name: 'jaxws-api', version: '2.3.1'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    compile "org.openjfx:javafx-base:11.0.1-ea+1:$platform"
    compile "org.openjfx:javafx-graphics:11.0.1-ea+1:$platform"
    compile "org.openjfx:javafx-controls:11.0.1-ea+1:$platform"
    compile "org.openjfx:javafx-fxml:11.0.1-ea+1:$platform"

    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.21.0'
    compileOnly group: 'com.install4j', name: 'install4j-runtime', version: '7.0.8'
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls',
                '--add-modules', 'javafx.fxml'
        ]
    }
}

apply plugin: 'application'
mainClassName = "de.micromata.merlin.app.javafx.Main"

run() {
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls',
                '--add-modules', 'javafx.fxml'
        ]
    }
}

task createVersionProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p['name'] = project.name
            p['build.date.millis'] = '' + System.currentTimeMillis()
            p.store w, null
        }
    }
}

classes {
    dependsOn createVersionProperties
}

apply plugin: 'distribution'

/*task prepareDir {
    def build = file("$buildDir/web-app/build")
    outputs.dir build
    doLast {
        build.mkdirs()
        new File(build, "readme.txt").write("Read me!")
    }
}*/

//distZip.dependsOn prepareDir
distributions() {
    main {
//        contents {
//            from { "${project(':merlin-webapp').projectDir}/build" }
//        }
    }
}
