import React from 'react';
import {Card, CardBody, CardFooter, CardHeader} from 'reactstrap';
import {formatDateTime} from "../../../utilities/global";
import I18n from "../../general/translation/I18n";

class TemplateCard extends React.Component {

    buildItem = (label, content) => {
        return <li className="list-group-item">{label}{content.map((line, index) => {
            return <div className="card-list-entry" key={index}>{line[0]} <span
                className={`card-list-entry-value ${line[2]}`}>{line[1]}</span>
            </div>;
        })}</li>;
    }

    render = () => {
        const template = this.props.template;
        let templateId = template.id ? template.id : template.filename;
        let content = [['Filename:', template.filename, 'filename']];
        let templateText = this.buildItem(null, content);

        const definition = this.props.definition;
        let definitionText = null;
        if (!definition.autoGenerated) {
            content = [['Filename:', definition.fileDescriptor.filename, 'filename']];
            if (definition.description) {
                content.push([null, definition.description, 'description']);
            }
            definitionText = this.buildItem(definition.id, content);
        }

        return <React.Fragment>
            <Card tag={'a'} href={`/templates/${template.primaryKey}`} outline color="success" className={'template'}
                  style={{backgroundColor: '#fff'}}>
                <CardHeader>{templateId}</CardHeader>
                <CardBody>
                    <ul className="list-group list-group-flush">
                        {templateText}
                        {definitionText}
                    </ul>
                </CardBody>
                <CardFooter><I18n name={'templates.clickToRun'}/><span className={'lastModified'}>{formatDateTime(template.lastModified)}</span></CardFooter>
            </Card>
        </React.Fragment>
    };

    constructor(props) {
        super(props);

        this.buildItem = this.buildItem.bind(this);
    }
}

export default TemplateCard;
